version: 2.1
commands:
    install_awscli:
       description: Install AWS CLI v2
       steps:
         - run:
             name: Install AWS CLI v2
             command: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
    install_ansible:
       description: Install Ansible 
       steps:
         - run:
             name: Install Ansible 
             command: |
                sudo apt update 
                sudo apt install software-properties-common -y
                sudo add-apt-repository --yes --update ppa:ansible/ansible
                sudo apt install ansible -y

    install_nodejs: 
      description: Install Node.js 13 
      steps:
        - run:
            name: Install Node.js 13 
            command: |
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs
              sudo npm install --global n
              sudo n 13.8.0
              
    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.

      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
     
    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7} 
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend 
            npm install 
            npm run build 

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install 
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Backend unit test
          command: |
             cd frontend
             npm install 
             npm test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test       
     
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Backend unit test
          command: |
             cd backend
             npm install 
             npm test
      - save_cache:
            paths: [backend/node_modules]
            key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout  
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical 


  deploy-infrastructure:
    docker:
      - image: cimg/base:stable 

    steps:
      - checkout 
      - install_awscli 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment
 

  configure-infrastructure:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["94:62:7e:fa:33:2f:6e:22:ae:da:bc:ce:60:9f:2e:d8"]
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
            
  
  run-migrations:
    docker:
      - image: cimg/node:13.8.0 
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
    
      - run:
          name: Send migration results to kvdb
          command: |
            echo "...................."
            cat ~/project/backend/migrations_dump.txt
            echo "...................."
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/Pe2mNS813nTkxMMapPFa1r/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending" 
            fi
            
      - destroy-environment
      - revert-migrations     

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ["94:62:7e:fa:33:2f:6e:22:ae:da:bc:ce:60:9f:2e:d8"]
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
  
      - run:
          name: Deploy frontend objects
          command: 
            #rm -rf node_modules
            #npm cache clean
            |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

     # Roll back on failure      
      - destroy-environment
      - revert-migrations              

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "94:62:7e:fa:33:2f:6e:22:ae:da:bc:ce:60:9f:2e:d8" 
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]          
      - run:
          name: Install dependencies
          command: |
            # install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            # install node js
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0
            
            # install Ansible
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y            
      - run:
          name: packging backend
          command: |
            cd backend
            npm install
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: | 
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
 

      - destroy-environment
      - revert-migrations     

      
       
  # deploy-backend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["94:62:7e:fa:33:2f:6e:22:ae:da:bc:ce:60:9f:2e:d8"]
  #     - attach_workspace:
  #         at: ~/
  #     - install_nodejs        
  #     - install_awscli
  #     - install_ansible         
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm i 
  #           npm run build
  #           cd .. 
  #           cd .circleci/ansible
  #           mkdir files 
  #           cd files
  #           tar -C ../../../backend -czvf artifact.tar.gz .
  #           cd ../
  #           export TYPEORM_MIGRATIONS_DIR=./migrations
  #           export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
  #           export TYPEORM_MIGRATIONS=./migrations/*.ts
          
  #           echo "inventory.txt content is: "
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
      
  #     - destroy-environment
  #     - revert-migrations              

  smoke-test:
    docker:
       - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[].Instances[].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              echo "backend is working successfully"
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            FRONTEND_WEBSITE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi 

      # - destroy-environment
      # - revert-migrations

#  cloudfront-update:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             # install AWS CLI
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Get old stack workflow id and Save it
#           command: |
#             export OldWorkflowID=$(aws cloudformation \
#                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#                     --no-paginate --output text)
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo Current_CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
#             echo $OldWorkflowID > ~/OldWorkflowID.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - OldWorkflowID.txt

#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --stack-name InitialStack \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople
#       #there is error on the project starter code in --parameter-overrides >> should be as I put here  
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment
#       - revert-migrations



#   # cleanup:
#   #   docker:
#   #     - image: cimg/base:stable
#   #   steps:
#   #     - checkout
#   #     - attach_workspace:
#   #         at: ~/
#   #     - run:
#   #         name: Install dependencies
#   #         command: |
#   #           # install AWS CLI
#   #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#   #           unzip awscliv2.zip
#   #           sudo ./aws/install
#   #     - run:
#   #         name: Remove old stacks and files
#   #         command: |
            
#   #           OldWorkflowID=$(cat ~/OldWorkflowID.txt)
#   #           echo OldWorkflowID: "${OldWorkflowID}"
#   #           echo Current_CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
         
#   #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#   #                   --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#   #           echo Stack names: "${STACKS[@]}"       
            

#   #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#   #           then
#   #             echo "------------------ Deleting old Envirments ------------------"
#   #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#   #             aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
#   #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#   #           else
  #             echo "------------------ Nothing to Delete/Can't Delete ------------------"  
  #           fi


workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]